/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common';

export interface PositionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'BETA'
      | 'MAX_BORROWING_RATE'
      | 'MAX_BORROWING_SPREAD'
      | 'MAX_REDEMPTION_SPREAD'
      | 'MINUTE_DECAY_FACTOR'
      | 'MIN_REDEMPTION_SPREAD'
      | 'acceptOwnership'
      | 'addCollateralToken'
      | 'baseRate'
      | 'borrowingSpread'
      | 'collateralTokenForPosition'
      | 'feeRecipient'
      | 'getBorrowingFee'
      | 'getBorrowingRate'
      | 'getBorrowingRateWithDecay'
      | 'getRedemptionFee'
      | 'getRedemptionFeeWithDecay'
      | 'getRedemptionRate'
      | 'getRedemptionRateWithDecay'
      | 'isDelegateWhitelisted'
      | 'lastFeeOperationTime'
      | 'liquidate'
      | 'managePosition(address,uint256,bool,uint256,bool,uint256)'
      | 'managePosition(address,address,uint256,bool,uint256,bool,uint256)'
      | 'modifyCollateralToken'
      | 'owner'
      | 'pendingOwner'
      | 'priceFeeds'
      | 'rToken'
      | 'raftCollateralTokens'
      | 'raftDebtToken'
      | 'redeemCollateral'
      | 'redemptionSpread'
      | 'renounceOwnership'
      | 'setBorrowingSpread'
      | 'setFeeRecipient'
      | 'setRedemptionSpread'
      | 'setSplitLiquidationCollateral'
      | 'splitLiquidationCollateral'
      | 'transferOwnership'
      | 'whitelistDelegate',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'BaseRateUpdated'
      | 'BorrowingSpreadUpdated'
      | 'CollateralChanged'
      | 'CollateralTokenAdded'
      | 'CollateralTokenModified'
      | 'DebtChanged'
      | 'DelegateWhitelisted'
      | 'FeeRecipientChanged'
      | 'LastFeeOpTimeUpdated'
      | 'Liquidation'
      | 'OwnershipTransferStarted'
      | 'OwnershipTransferred'
      | 'PositionClosed'
      | 'PositionCreated'
      | 'PositionManagerDeployed'
      | 'RBorrowingFeePaid'
      | 'Redemption'
      | 'RedemptionSpreadUpdated'
      | 'SplitLiquidationCollateralChanged'
      | 'TotalDebtChanged',
  ): EventFragment;

  encodeFunctionData(functionFragment: 'BETA', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BORROWING_RATE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BORROWING_SPREAD', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_REDEMPTION_SPREAD', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MINUTE_DECAY_FACTOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_REDEMPTION_SPREAD', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addCollateralToken', values: [AddressLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'baseRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrowingSpread', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateralTokenForPosition', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'feeRecipient', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBorrowingFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getBorrowingRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBorrowingRateWithDecay', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRedemptionFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getRedemptionFeeWithDecay', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getRedemptionRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRedemptionRateWithDecay', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isDelegateWhitelisted', values: [AddressLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'lastFeeOperationTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidate', values: [AddressLike, AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'managePosition(address,uint256,bool,uint256,bool,uint256)',
    values: [AddressLike, BigNumberish, boolean, BigNumberish, boolean, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'managePosition(address,address,uint256,bool,uint256,bool,uint256)',
    values: [AddressLike, AddressLike, BigNumberish, boolean, BigNumberish, boolean, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'modifyCollateralToken', values: [AddressLike, boolean]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'priceFeeds', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'rToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'raftCollateralTokens', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'raftDebtToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'redeemCollateral', values: [AddressLike, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'redemptionSpread', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setBorrowingSpread', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setFeeRecipient', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'setRedemptionSpread', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setSplitLiquidationCollateral', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'splitLiquidationCollateral', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'whitelistDelegate', values: [AddressLike, boolean]): string;

  decodeFunctionResult(functionFragment: 'BETA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BORROWING_RATE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BORROWING_SPREAD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_REDEMPTION_SPREAD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MINUTE_DECAY_FACTOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_REDEMPTION_SPREAD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addCollateralToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowingSpread', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralTokenForPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowingFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowingRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowingRateWithDecay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionFeeWithDecay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionRateWithDecay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isDelegateWhitelisted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastFeeOperationTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'managePosition(address,uint256,bool,uint256,bool,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'managePosition(address,address,uint256,bool,uint256,bool,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'modifyCollateralToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceFeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'raftCollateralTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'raftDebtToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redemptionSpread', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBorrowingSpread', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRedemptionSpread', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSplitLiquidationCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'splitLiquidationCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistDelegate', data: BytesLike): Result;
}

export namespace BaseRateUpdatedEvent {
  export type InputTuple = [baseRate: BigNumberish];
  export type OutputTuple = [baseRate: bigint];
  export interface OutputObject {
    baseRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowingSpreadUpdatedEvent {
  export type InputTuple = [borrowingSpread: BigNumberish];
  export type OutputTuple = [borrowingSpread: bigint];
  export interface OutputObject {
    borrowingSpread: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralChangedEvent {
  export type InputTuple = [position: AddressLike, collateralAmount: BigNumberish, isCollateralIncrease: boolean];
  export type OutputTuple = [position: string, collateralAmount: bigint, isCollateralIncrease: boolean];
  export interface OutputObject {
    position: string;
    collateralAmount: bigint;
    isCollateralIncrease: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralTokenAddedEvent {
  export type InputTuple = [collateralToken: AddressLike, raftCollateralToken: AddressLike, priceFeed: AddressLike];
  export type OutputTuple = [collateralToken: string, raftCollateralToken: string, priceFeed: string];
  export interface OutputObject {
    collateralToken: string;
    raftCollateralToken: string;
    priceFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralTokenModifiedEvent {
  export type InputTuple = [collateralToken: AddressLike, raftCollateralToken: AddressLike, isEnabled: boolean];
  export type OutputTuple = [collateralToken: string, raftCollateralToken: string, isEnabled: boolean];
  export interface OutputObject {
    collateralToken: string;
    raftCollateralToken: string;
    isEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebtChangedEvent {
  export type InputTuple = [position: AddressLike, debtAmount: BigNumberish, isDebtIncrease: boolean];
  export type OutputTuple = [position: string, debtAmount: bigint, isDebtIncrease: boolean];
  export interface OutputObject {
    position: string;
    debtAmount: bigint;
    isDebtIncrease: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateWhitelistedEvent {
  export type InputTuple = [position: AddressLike, delegate: AddressLike, whitelisted: boolean];
  export type OutputTuple = [position: string, delegate: string, whitelisted: boolean];
  export interface OutputObject {
    position: string;
    delegate: string;
    whitelisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipientChangedEvent {
  export type InputTuple = [feeRecipient: AddressLike];
  export type OutputTuple = [feeRecipient: string];
  export interface OutputObject {
    feeRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LastFeeOpTimeUpdatedEvent {
  export type InputTuple = [lastFeeOpTime: BigNumberish];
  export type OutputTuple = [lastFeeOpTime: bigint];
  export interface OutputObject {
    lastFeeOpTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    position: AddressLike,
    collateralToken: AddressLike,
    debtLiquidated: BigNumberish,
    collateralLiquidated: BigNumberish,
    collateralSentToLiquidator: BigNumberish,
    collateralLiquidationFeePaid: BigNumberish,
    isRedistribution: boolean,
  ];
  export type OutputTuple = [
    liquidator: string,
    position: string,
    collateralToken: string,
    debtLiquidated: bigint,
    collateralLiquidated: bigint,
    collateralSentToLiquidator: bigint,
    collateralLiquidationFeePaid: bigint,
    isRedistribution: boolean,
  ];
  export interface OutputObject {
    liquidator: string;
    position: string;
    collateralToken: string;
    debtLiquidated: bigint;
    collateralLiquidated: bigint;
    collateralSentToLiquidator: bigint;
    collateralLiquidationFeePaid: bigint;
    isRedistribution: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionClosedEvent {
  export type InputTuple = [position: AddressLike, collateralToken: AddressLike];
  export type OutputTuple = [position: string, collateralToken: string];
  export interface OutputObject {
    position: string;
    collateralToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionCreatedEvent {
  export type InputTuple = [position: AddressLike, collateralToken: AddressLike];
  export type OutputTuple = [position: string, collateralToken: string];
  export interface OutputObject {
    position: string;
    collateralToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionManagerDeployedEvent {
  export type InputTuple = [rToken: AddressLike, raftDebtToken: AddressLike, feeRecipient: AddressLike];
  export type OutputTuple = [rToken: string, raftDebtToken: string, feeRecipient: string];
  export interface OutputObject {
    rToken: string;
    raftDebtToken: string;
    feeRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RBorrowingFeePaidEvent {
  export type InputTuple = [position: AddressLike, feeAmount: BigNumberish];
  export type OutputTuple = [position: string, feeAmount: bigint];
  export interface OutputObject {
    position: string;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionEvent {
  export type InputTuple = [debtRedeemed: BigNumberish, collateralSent: BigNumberish, fee: BigNumberish];
  export type OutputTuple = [debtRedeemed: bigint, collateralSent: bigint, fee: bigint];
  export interface OutputObject {
    debtRedeemed: bigint;
    collateralSent: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionSpreadUpdatedEvent {
  export type InputTuple = [redemptionSpread: BigNumberish];
  export type OutputTuple = [redemptionSpread: bigint];
  export interface OutputObject {
    redemptionSpread: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SplitLiquidationCollateralChangedEvent {
  export type InputTuple = [newSplitLiquidationCollateral: AddressLike];
  export type OutputTuple = [newSplitLiquidationCollateral: string];
  export interface OutputObject {
    newSplitLiquidationCollateral: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TotalDebtChangedEvent {
  export type InputTuple = [totalDebt: BigNumberish];
  export type OutputTuple = [totalDebt: bigint];
  export interface OutputObject {
    totalDebt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PositionManager extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: PositionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  BETA: TypedContractMethod<[], [bigint], 'view'>;

  MAX_BORROWING_RATE: TypedContractMethod<[], [bigint], 'view'>;

  MAX_BORROWING_SPREAD: TypedContractMethod<[], [bigint], 'view'>;

  MAX_REDEMPTION_SPREAD: TypedContractMethod<[], [bigint], 'view'>;

  MINUTE_DECAY_FACTOR: TypedContractMethod<[], [bigint], 'view'>;

  MIN_REDEMPTION_SPREAD: TypedContractMethod<[], [bigint], 'view'>;

  acceptOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  addCollateralToken: TypedContractMethod<[collateralToken: AddressLike, priceFeed: AddressLike], [void], 'nonpayable'>;

  baseRate: TypedContractMethod<[], [bigint], 'view'>;

  borrowingSpread: TypedContractMethod<[], [bigint], 'view'>;

  collateralTokenForPosition: TypedContractMethod<[position: AddressLike], [string], 'view'>;

  feeRecipient: TypedContractMethod<[], [string], 'view'>;

  getBorrowingFee: TypedContractMethod<[debtAmount: BigNumberish], [bigint], 'view'>;

  getBorrowingRate: TypedContractMethod<[], [bigint], 'view'>;

  getBorrowingRateWithDecay: TypedContractMethod<[], [bigint], 'view'>;

  getRedemptionFee: TypedContractMethod<[collateralAmount: BigNumberish], [bigint], 'view'>;

  getRedemptionFeeWithDecay: TypedContractMethod<[collateralAmount: BigNumberish], [bigint], 'view'>;

  getRedemptionRate: TypedContractMethod<[], [bigint], 'view'>;

  getRedemptionRateWithDecay: TypedContractMethod<[], [bigint], 'view'>;

  isDelegateWhitelisted: TypedContractMethod<[position: AddressLike, delegate: AddressLike], [boolean], 'view'>;

  lastFeeOperationTime: TypedContractMethod<[], [bigint], 'view'>;

  liquidate: TypedContractMethod<[collateralToken: AddressLike, position: AddressLike], [void], 'nonpayable'>;

  'managePosition(address,uint256,bool,uint256,bool,uint256)': TypedContractMethod<
    [
      collateralToken: AddressLike,
      collateralChange: BigNumberish,
      isCollateralIncrease: boolean,
      debtChange: BigNumberish,
      isDebtIncrease: boolean,
      maxFeePercentage: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;

  'managePosition(address,address,uint256,bool,uint256,bool,uint256)': TypedContractMethod<
    [
      collateralToken: AddressLike,
      position: AddressLike,
      collateralChange: BigNumberish,
      isCollateralIncrease: boolean,
      debtChange: BigNumberish,
      isDebtIncrease: boolean,
      maxFeePercentage: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;

  modifyCollateralToken: TypedContractMethod<[collateralToken: AddressLike, isEnabled: boolean], [void], 'nonpayable'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  pendingOwner: TypedContractMethod<[], [string], 'view'>;

  priceFeeds: TypedContractMethod<[collateralToken: AddressLike], [string], 'view'>;

  rToken: TypedContractMethod<[], [string], 'view'>;

  raftCollateralTokens: TypedContractMethod<
    [collateralToken: AddressLike],
    [[string, boolean] & { token: string; isEnabled: boolean }],
    'view'
  >;

  raftDebtToken: TypedContractMethod<[], [string], 'view'>;

  redeemCollateral: TypedContractMethod<
    [collateralToken: AddressLike, debtAmount: BigNumberish, maxFeePercentage: BigNumberish],
    [void],
    'nonpayable'
  >;

  redemptionSpread: TypedContractMethod<[], [bigint], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  setBorrowingSpread: TypedContractMethod<[newBorrowingSpread: BigNumberish], [void], 'nonpayable'>;

  setFeeRecipient: TypedContractMethod<[newFeeRecipient: AddressLike], [void], 'nonpayable'>;

  setRedemptionSpread: TypedContractMethod<[newRedemptionSpread: BigNumberish], [void], 'nonpayable'>;

  setSplitLiquidationCollateral: TypedContractMethod<
    [newSplitLiquidationCollateral: AddressLike],
    [void],
    'nonpayable'
  >;

  splitLiquidationCollateral: TypedContractMethod<[], [string], 'view'>;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  whitelistDelegate: TypedContractMethod<[delegate: AddressLike, whitelisted: boolean], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'BETA'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'MAX_BORROWING_RATE'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'MAX_BORROWING_SPREAD'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'MAX_REDEMPTION_SPREAD'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'MINUTE_DECAY_FACTOR'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'MIN_REDEMPTION_SPREAD'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'acceptOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'addCollateralToken',
  ): TypedContractMethod<[collateralToken: AddressLike, priceFeed: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'baseRate'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'borrowingSpread'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'collateralTokenForPosition',
  ): TypedContractMethod<[position: AddressLike], [string], 'view'>;
  getFunction(nameOrSignature: 'feeRecipient'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'getBorrowingFee'): TypedContractMethod<[debtAmount: BigNumberish], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getBorrowingRate'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getBorrowingRateWithDecay'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getRedemptionFee',
  ): TypedContractMethod<[collateralAmount: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getRedemptionFeeWithDecay',
  ): TypedContractMethod<[collateralAmount: BigNumberish], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getRedemptionRate'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getRedemptionRateWithDecay'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'isDelegateWhitelisted',
  ): TypedContractMethod<[position: AddressLike, delegate: AddressLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'lastFeeOperationTime'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'liquidate',
  ): TypedContractMethod<[collateralToken: AddressLike, position: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'managePosition(address,uint256,bool,uint256,bool,uint256)',
  ): TypedContractMethod<
    [
      collateralToken: AddressLike,
      collateralChange: BigNumberish,
      isCollateralIncrease: boolean,
      debtChange: BigNumberish,
      isDebtIncrease: boolean,
      maxFeePercentage: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'managePosition(address,address,uint256,bool,uint256,bool,uint256)',
  ): TypedContractMethod<
    [
      collateralToken: AddressLike,
      position: AddressLike,
      collateralChange: BigNumberish,
      isCollateralIncrease: boolean,
      debtChange: BigNumberish,
      isDebtIncrease: boolean,
      maxFeePercentage: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'modifyCollateralToken',
  ): TypedContractMethod<[collateralToken: AddressLike, isEnabled: boolean], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'pendingOwner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'priceFeeds'): TypedContractMethod<[collateralToken: AddressLike], [string], 'view'>;
  getFunction(nameOrSignature: 'rToken'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'raftCollateralTokens',
  ): TypedContractMethod<
    [collateralToken: AddressLike],
    [[string, boolean] & { token: string; isEnabled: boolean }],
    'view'
  >;
  getFunction(nameOrSignature: 'raftDebtToken'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'redeemCollateral',
  ): TypedContractMethod<
    [collateralToken: AddressLike, debtAmount: BigNumberish, maxFeePercentage: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(nameOrSignature: 'redemptionSpread'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setBorrowingSpread',
  ): TypedContractMethod<[newBorrowingSpread: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setFeeRecipient',
  ): TypedContractMethod<[newFeeRecipient: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setRedemptionSpread',
  ): TypedContractMethod<[newRedemptionSpread: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setSplitLiquidationCollateral',
  ): TypedContractMethod<[newSplitLiquidationCollateral: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'splitLiquidationCollateral'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'whitelistDelegate',
  ): TypedContractMethod<[delegate: AddressLike, whitelisted: boolean], [void], 'nonpayable'>;

  getEvent(
    key: 'BaseRateUpdated',
  ): TypedContractEvent<
    BaseRateUpdatedEvent.InputTuple,
    BaseRateUpdatedEvent.OutputTuple,
    BaseRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'BorrowingSpreadUpdated',
  ): TypedContractEvent<
    BorrowingSpreadUpdatedEvent.InputTuple,
    BorrowingSpreadUpdatedEvent.OutputTuple,
    BorrowingSpreadUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'CollateralChanged',
  ): TypedContractEvent<
    CollateralChangedEvent.InputTuple,
    CollateralChangedEvent.OutputTuple,
    CollateralChangedEvent.OutputObject
  >;
  getEvent(
    key: 'CollateralTokenAdded',
  ): TypedContractEvent<
    CollateralTokenAddedEvent.InputTuple,
    CollateralTokenAddedEvent.OutputTuple,
    CollateralTokenAddedEvent.OutputObject
  >;
  getEvent(
    key: 'CollateralTokenModified',
  ): TypedContractEvent<
    CollateralTokenModifiedEvent.InputTuple,
    CollateralTokenModifiedEvent.OutputTuple,
    CollateralTokenModifiedEvent.OutputObject
  >;
  getEvent(
    key: 'DebtChanged',
  ): TypedContractEvent<DebtChangedEvent.InputTuple, DebtChangedEvent.OutputTuple, DebtChangedEvent.OutputObject>;
  getEvent(
    key: 'DelegateWhitelisted',
  ): TypedContractEvent<
    DelegateWhitelistedEvent.InputTuple,
    DelegateWhitelistedEvent.OutputTuple,
    DelegateWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: 'FeeRecipientChanged',
  ): TypedContractEvent<
    FeeRecipientChangedEvent.InputTuple,
    FeeRecipientChangedEvent.OutputTuple,
    FeeRecipientChangedEvent.OutputObject
  >;
  getEvent(
    key: 'LastFeeOpTimeUpdated',
  ): TypedContractEvent<
    LastFeeOpTimeUpdatedEvent.InputTuple,
    LastFeeOpTimeUpdatedEvent.OutputTuple,
    LastFeeOpTimeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Liquidation',
  ): TypedContractEvent<LiquidationEvent.InputTuple, LiquidationEvent.OutputTuple, LiquidationEvent.OutputObject>;
  getEvent(
    key: 'OwnershipTransferStarted',
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'PositionClosed',
  ): TypedContractEvent<
    PositionClosedEvent.InputTuple,
    PositionClosedEvent.OutputTuple,
    PositionClosedEvent.OutputObject
  >;
  getEvent(
    key: 'PositionCreated',
  ): TypedContractEvent<
    PositionCreatedEvent.InputTuple,
    PositionCreatedEvent.OutputTuple,
    PositionCreatedEvent.OutputObject
  >;
  getEvent(
    key: 'PositionManagerDeployed',
  ): TypedContractEvent<
    PositionManagerDeployedEvent.InputTuple,
    PositionManagerDeployedEvent.OutputTuple,
    PositionManagerDeployedEvent.OutputObject
  >;
  getEvent(
    key: 'RBorrowingFeePaid',
  ): TypedContractEvent<
    RBorrowingFeePaidEvent.InputTuple,
    RBorrowingFeePaidEvent.OutputTuple,
    RBorrowingFeePaidEvent.OutputObject
  >;
  getEvent(
    key: 'Redemption',
  ): TypedContractEvent<RedemptionEvent.InputTuple, RedemptionEvent.OutputTuple, RedemptionEvent.OutputObject>;
  getEvent(
    key: 'RedemptionSpreadUpdated',
  ): TypedContractEvent<
    RedemptionSpreadUpdatedEvent.InputTuple,
    RedemptionSpreadUpdatedEvent.OutputTuple,
    RedemptionSpreadUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'SplitLiquidationCollateralChanged',
  ): TypedContractEvent<
    SplitLiquidationCollateralChangedEvent.InputTuple,
    SplitLiquidationCollateralChangedEvent.OutputTuple,
    SplitLiquidationCollateralChangedEvent.OutputObject
  >;
  getEvent(
    key: 'TotalDebtChanged',
  ): TypedContractEvent<
    TotalDebtChangedEvent.InputTuple,
    TotalDebtChangedEvent.OutputTuple,
    TotalDebtChangedEvent.OutputObject
  >;

  filters: {
    'BaseRateUpdated(uint256)': TypedContractEvent<
      BaseRateUpdatedEvent.InputTuple,
      BaseRateUpdatedEvent.OutputTuple,
      BaseRateUpdatedEvent.OutputObject
    >;
    BaseRateUpdated: TypedContractEvent<
      BaseRateUpdatedEvent.InputTuple,
      BaseRateUpdatedEvent.OutputTuple,
      BaseRateUpdatedEvent.OutputObject
    >;

    'BorrowingSpreadUpdated(uint256)': TypedContractEvent<
      BorrowingSpreadUpdatedEvent.InputTuple,
      BorrowingSpreadUpdatedEvent.OutputTuple,
      BorrowingSpreadUpdatedEvent.OutputObject
    >;
    BorrowingSpreadUpdated: TypedContractEvent<
      BorrowingSpreadUpdatedEvent.InputTuple,
      BorrowingSpreadUpdatedEvent.OutputTuple,
      BorrowingSpreadUpdatedEvent.OutputObject
    >;

    'CollateralChanged(address,uint256,bool)': TypedContractEvent<
      CollateralChangedEvent.InputTuple,
      CollateralChangedEvent.OutputTuple,
      CollateralChangedEvent.OutputObject
    >;
    CollateralChanged: TypedContractEvent<
      CollateralChangedEvent.InputTuple,
      CollateralChangedEvent.OutputTuple,
      CollateralChangedEvent.OutputObject
    >;

    'CollateralTokenAdded(address,address,address)': TypedContractEvent<
      CollateralTokenAddedEvent.InputTuple,
      CollateralTokenAddedEvent.OutputTuple,
      CollateralTokenAddedEvent.OutputObject
    >;
    CollateralTokenAdded: TypedContractEvent<
      CollateralTokenAddedEvent.InputTuple,
      CollateralTokenAddedEvent.OutputTuple,
      CollateralTokenAddedEvent.OutputObject
    >;

    'CollateralTokenModified(address,address,bool)': TypedContractEvent<
      CollateralTokenModifiedEvent.InputTuple,
      CollateralTokenModifiedEvent.OutputTuple,
      CollateralTokenModifiedEvent.OutputObject
    >;
    CollateralTokenModified: TypedContractEvent<
      CollateralTokenModifiedEvent.InputTuple,
      CollateralTokenModifiedEvent.OutputTuple,
      CollateralTokenModifiedEvent.OutputObject
    >;

    'DebtChanged(address,uint256,bool)': TypedContractEvent<
      DebtChangedEvent.InputTuple,
      DebtChangedEvent.OutputTuple,
      DebtChangedEvent.OutputObject
    >;
    DebtChanged: TypedContractEvent<
      DebtChangedEvent.InputTuple,
      DebtChangedEvent.OutputTuple,
      DebtChangedEvent.OutputObject
    >;

    'DelegateWhitelisted(address,address,bool)': TypedContractEvent<
      DelegateWhitelistedEvent.InputTuple,
      DelegateWhitelistedEvent.OutputTuple,
      DelegateWhitelistedEvent.OutputObject
    >;
    DelegateWhitelisted: TypedContractEvent<
      DelegateWhitelistedEvent.InputTuple,
      DelegateWhitelistedEvent.OutputTuple,
      DelegateWhitelistedEvent.OutputObject
    >;

    'FeeRecipientChanged(address)': TypedContractEvent<
      FeeRecipientChangedEvent.InputTuple,
      FeeRecipientChangedEvent.OutputTuple,
      FeeRecipientChangedEvent.OutputObject
    >;
    FeeRecipientChanged: TypedContractEvent<
      FeeRecipientChangedEvent.InputTuple,
      FeeRecipientChangedEvent.OutputTuple,
      FeeRecipientChangedEvent.OutputObject
    >;

    'LastFeeOpTimeUpdated(uint256)': TypedContractEvent<
      LastFeeOpTimeUpdatedEvent.InputTuple,
      LastFeeOpTimeUpdatedEvent.OutputTuple,
      LastFeeOpTimeUpdatedEvent.OutputObject
    >;
    LastFeeOpTimeUpdated: TypedContractEvent<
      LastFeeOpTimeUpdatedEvent.InputTuple,
      LastFeeOpTimeUpdatedEvent.OutputTuple,
      LastFeeOpTimeUpdatedEvent.OutputObject
    >;

    'Liquidation(address,address,address,uint256,uint256,uint256,uint256,bool)': TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;
    Liquidation: TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;

    'OwnershipTransferStarted(address,address)': TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'PositionClosed(address,address)': TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;
    PositionClosed: TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;

    'PositionCreated(address,address)': TypedContractEvent<
      PositionCreatedEvent.InputTuple,
      PositionCreatedEvent.OutputTuple,
      PositionCreatedEvent.OutputObject
    >;
    PositionCreated: TypedContractEvent<
      PositionCreatedEvent.InputTuple,
      PositionCreatedEvent.OutputTuple,
      PositionCreatedEvent.OutputObject
    >;

    'PositionManagerDeployed(address,address,address)': TypedContractEvent<
      PositionManagerDeployedEvent.InputTuple,
      PositionManagerDeployedEvent.OutputTuple,
      PositionManagerDeployedEvent.OutputObject
    >;
    PositionManagerDeployed: TypedContractEvent<
      PositionManagerDeployedEvent.InputTuple,
      PositionManagerDeployedEvent.OutputTuple,
      PositionManagerDeployedEvent.OutputObject
    >;

    'RBorrowingFeePaid(address,uint256)': TypedContractEvent<
      RBorrowingFeePaidEvent.InputTuple,
      RBorrowingFeePaidEvent.OutputTuple,
      RBorrowingFeePaidEvent.OutputObject
    >;
    RBorrowingFeePaid: TypedContractEvent<
      RBorrowingFeePaidEvent.InputTuple,
      RBorrowingFeePaidEvent.OutputTuple,
      RBorrowingFeePaidEvent.OutputObject
    >;

    'Redemption(uint256,uint256,uint256)': TypedContractEvent<
      RedemptionEvent.InputTuple,
      RedemptionEvent.OutputTuple,
      RedemptionEvent.OutputObject
    >;
    Redemption: TypedContractEvent<
      RedemptionEvent.InputTuple,
      RedemptionEvent.OutputTuple,
      RedemptionEvent.OutputObject
    >;

    'RedemptionSpreadUpdated(uint256)': TypedContractEvent<
      RedemptionSpreadUpdatedEvent.InputTuple,
      RedemptionSpreadUpdatedEvent.OutputTuple,
      RedemptionSpreadUpdatedEvent.OutputObject
    >;
    RedemptionSpreadUpdated: TypedContractEvent<
      RedemptionSpreadUpdatedEvent.InputTuple,
      RedemptionSpreadUpdatedEvent.OutputTuple,
      RedemptionSpreadUpdatedEvent.OutputObject
    >;

    'SplitLiquidationCollateralChanged(address)': TypedContractEvent<
      SplitLiquidationCollateralChangedEvent.InputTuple,
      SplitLiquidationCollateralChangedEvent.OutputTuple,
      SplitLiquidationCollateralChangedEvent.OutputObject
    >;
    SplitLiquidationCollateralChanged: TypedContractEvent<
      SplitLiquidationCollateralChangedEvent.InputTuple,
      SplitLiquidationCollateralChangedEvent.OutputTuple,
      SplitLiquidationCollateralChangedEvent.OutputObject
    >;

    'TotalDebtChanged(uint256)': TypedContractEvent<
      TotalDebtChangedEvent.InputTuple,
      TotalDebtChangedEvent.OutputTuple,
      TotalDebtChangedEvent.OutputObject
    >;
    TotalDebtChanged: TypedContractEvent<
      TotalDebtChangedEvent.InputTuple,
      TotalDebtChangedEvent.OutputTuple,
      TotalDebtChangedEvent.OutputObject
    >;
  };
}
