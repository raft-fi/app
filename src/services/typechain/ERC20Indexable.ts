/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common';

export interface ERC20IndexableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'INDEX_PRECISION'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'burn'
      | 'currentIndex'
      | 'decimals'
      | 'decreaseAllowance'
      | 'increaseAllowance'
      | 'mint'
      | 'name'
      | 'positionManager'
      | 'setIndex'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom',
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'Approval' | 'ERC20IndexableDeployed' | 'IndexUpdated' | 'Transfer'): EventFragment;

  encodeFunctionData(functionFragment: 'INDEX_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [AddressLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'burn', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'currentIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'mint', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'positionManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setIndex', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'INDEX_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positionManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [owner: AddressLike, spender: AddressLike, value: BigNumberish];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC20IndexableDeployedEvent {
  export type InputTuple = [positionManager: AddressLike];
  export type OutputTuple = [positionManager: string];
  export interface OutputObject {
    positionManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexUpdatedEvent {
  export type InputTuple = [newIndex: BigNumberish];
  export type OutputTuple = [newIndex: bigint];
  export interface OutputObject {
    newIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike, value: BigNumberish];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC20Indexable extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: ERC20IndexableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  INDEX_PRECISION: TypedContractMethod<[], [bigint], 'view'>;

  allowance: TypedContractMethod<[arg0: AddressLike, arg1: AddressLike], [bigint], 'view'>;

  approve: TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'nonpayable'>;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], 'view'>;

  burn: TypedContractMethod<[from: AddressLike, amount: BigNumberish], [void], 'nonpayable'>;

  currentIndex: TypedContractMethod<[], [bigint], 'view'>;

  decimals: TypedContractMethod<[], [bigint], 'view'>;

  decreaseAllowance: TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'nonpayable'>;

  increaseAllowance: TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'nonpayable'>;

  mint: TypedContractMethod<[to: AddressLike, amount: BigNumberish], [void], 'nonpayable'>;

  name: TypedContractMethod<[], [string], 'view'>;

  positionManager: TypedContractMethod<[], [string], 'view'>;

  setIndex: TypedContractMethod<[backingAmount: BigNumberish], [void], 'nonpayable'>;

  symbol: TypedContractMethod<[], [string], 'view'>;

  totalSupply: TypedContractMethod<[], [bigint], 'view'>;

  transfer: TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'nonpayable'>;

  transferFrom: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'INDEX_PRECISION'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'allowance',
  ): TypedContractMethod<[arg0: AddressLike, arg1: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'approve',
  ): TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'nonpayable'>;
  getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<[account: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'burn',
  ): TypedContractMethod<[from: AddressLike, amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'currentIndex'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'decimals'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'decreaseAllowance',
  ): TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'increaseAllowance',
  ): TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'mint',
  ): TypedContractMethod<[to: AddressLike, amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'name'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'positionManager'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'setIndex'): TypedContractMethod<[backingAmount: BigNumberish], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'symbol'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'transfer',
  ): TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'transferFrom',
  ): TypedContractMethod<[arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish], [boolean], 'nonpayable'>;

  getEvent(
    key: 'Approval',
  ): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
  getEvent(
    key: 'ERC20IndexableDeployed',
  ): TypedContractEvent<
    ERC20IndexableDeployedEvent.InputTuple,
    ERC20IndexableDeployedEvent.OutputTuple,
    ERC20IndexableDeployedEvent.OutputObject
  >;
  getEvent(
    key: 'IndexUpdated',
  ): TypedContractEvent<IndexUpdatedEvent.InputTuple, IndexUpdatedEvent.OutputTuple, IndexUpdatedEvent.OutputObject>;
  getEvent(
    key: 'Transfer',
  ): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;

  filters: {
    'Approval(address,address,uint256)': TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;

    'ERC20IndexableDeployed(address)': TypedContractEvent<
      ERC20IndexableDeployedEvent.InputTuple,
      ERC20IndexableDeployedEvent.OutputTuple,
      ERC20IndexableDeployedEvent.OutputObject
    >;
    ERC20IndexableDeployed: TypedContractEvent<
      ERC20IndexableDeployedEvent.InputTuple,
      ERC20IndexableDeployedEvent.OutputTuple,
      ERC20IndexableDeployedEvent.OutputObject
    >;

    'IndexUpdated(uint256)': TypedContractEvent<
      IndexUpdatedEvent.InputTuple,
      IndexUpdatedEvent.OutputTuple,
      IndexUpdatedEvent.OutputObject
    >;
    IndexUpdated: TypedContractEvent<
      IndexUpdatedEvent.InputTuple,
      IndexUpdatedEvent.OutputTuple,
      IndexUpdatedEvent.OutputObject
    >;

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
  };
}
